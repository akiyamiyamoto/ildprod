'''
Created on Mar 26, 2012

@author: Stephane Poss

Modified to perform ILD reconstruction.

C. Calancha
'''

# TODO: add evttype to the ProdGroup
# dryrun = True
#dryrun = False

analysis         = 'ILD-DBD2' ##Some analysis: the prods will belong to the ProdGroup
# analysis name: ILD-DBD2 for Re-Reconstruction of DBS Sim samples with v01-17-10 reconstruction code.
detectorModel = 'ILD_o1_v05'
accelerator   = '500-TDR_ws'
( strenergy, machineParameters ) = accelerator.split('-')
energy        = int(strenergy) # beam energy in string

MarlinVer = 'v01-17-10'
ILDConfig = 'v01-17-10_'+strenergy  # Assumed ILDConfig version
mokka_config = 'v01-14-01-p00'

my_evttype       = '4f_singleZee_leptonic'

basedir = '/ilc/prod/ilc/test/ild-rerec/'
matchToInput_marlin = basedir+'sim/'+accelerator + '/' + my_evttype + '/' + detectorModel + '/' + mokka_config

# Input files for test are
# /ilc/prod/ilc/test/ild-rerec/sim/500-TDR_ws/6f_ttbar/ILD_o1_v05/v01-14-01-p00/00005615/000/
# sv01-14-01-p00.mILD_o1_v05.E500-TDR_ws.I108677.P6f_yyuyyu.eL.pR_sim_5615_1.slcio
# sv01-14-01-p00.mILD_o1_v05.E500-TDR_ws.I108677.P6f_yyuyyu.eL.pR_sim_5615_100.slcio
# sv01-14-01-p00.mILD_o1_v05.E500-TDR_ws.I108677.P6f_yyuyyu.eL.pR_sim_5615_101.slcio


# Meta for Input data query
meta = {}
meta['Datatype']      = 'SIM' # JUST MARLIN / MARLIN_OVERLAY
meta['Energy']         = energy
meta['Machine']        = 'ilc'
meta['MachineParams']  = machineParameters
meta['SoftwareTag']    = mokka_config
meta['DetectorModel'] = detectorModel
# meta['ProdID']        = prodid

# 
my_evtclass      = '4f'  # THIS is defined in stdhep meta key as "EvtClass"
process          = '250035'
prodid           = 6836
genprocessname   = '4f_sze_l'  ## DEFINE in stdhep meta key as "GenProcessName"
# my_stdhepdir     = '4f/temp003'
# energy           = 500. ##This is mostly needed to define easily the steering files and the overlay parameters
analysis += '_' + my_evttype
additional_name   = '_' + genprocessname + '_20160710_01_'
additional_name   += '_ildconfig-' + ILDConfig
# matchToInput_marlin      = '/ilc/prod/ilc/mc-dbd/ild/sim/' + accelerator + '/' + my_evttype + '/' + detectorModel + '/' + my_mokka_conf_db
wname = process + "_" + strenergy + '_ild_rec_overlay_'+genprocessname + '_20160728-01_r'+ILDConfig
prodgroup = analysis+'_'+strenergy

# meta_energy       = str(int(energy)) ##This is needed for the meta data search below
# my_mokka_conf_dbd = 'v01-14-01-p00'
my_mokka_conf_dbd = mokka_config

# for the overlay: using DBD numbers
BXOverlay      = 1
GGToHadInt250  = 0.2
GGToHadInt350  = 0.33
GGToHadInt500  = 1.7
GGToHadInt1000 = 4.1

## MarlinVer    = "v01-16-02"
MokkaVer     = "080003"
banned_sites = [""]
# dryrun = False
# do not register anything nor create anything.
# Should be used once the splitting-at-stdhep-level prods are submitted.

# detectorModel = 'ILD_o1_v05'    ##OR anything valid, but be careful with the overlay, the files need to exist
# ILDConfig = ''
dbslice = "mokka-08-00-dbdump.sql"

# machineParameters = 'TDR_ws'
# if energy == 1000.:
# ILDConfig         = 'v01-14-01-p00' # this is wrong!
#   ILDConfig         = ILDConfig or 'v01-16-p03'
#   machineParameters = 'B1b_ws'
# elif energy == 500.:
#   ILDConfig     = ILDConfig or 'v01-16-p05_500'
# elif energy == 350.:
#   ILDConfig     = ILDConfig or 'v01-16-p09_350'
# elif energy == 250.:
#   ILDConfig     = ILDConfig or 'v01-16-p10_250'
# else:
#  print "ILDConfig ILD: No ILDConfig defined for this energy (%.1f GeV)"%energy


# energyMachinePars        = meta_energy + '-' + machineParameters
# matchToInput_mokka       = '/ilc/prod/ilc/mc-dbd.generated/' + energyMachinePars + '/' + my_stdhepdir

print matchToInput_marlin
# print matchToInput_mokka

# SE        = "KEK-SRM"
SE        = "PNNL-SRM"
# LCG_SITE  = "LCG.KEK.jp"
input_sand_box = [""]
##This is where magic happens
# meta              = {}

# meta['Datatype']       = 'gen' # MOKKA or stdhepsplit or MOKKA+MARLIN
# meta['Datatype']      = 'SIM' # JUST MARLIN / MARLIN_OVERLAY

# meta['Energy']         = energy
# meta['Machine']        = 'ilc'
# meta['MachineParams']  = machineParameters
# meta['SoftwareTag']    = my_mokka_conf_dbd

# GenProcessID or ProcessID
# if meta['Datatype'] == 'gen':
#   meta['GenProcessID'] = process
#   meta['GenProcessName'] = genprocessname
# else:
#   meta['ProcessID'] = process
  # These parameters automatically retrieved if you run Mokka. If
  # running standalone Marlin you need to specify them
#   meta['DetectorModel'] = detectorModel
#   meta['EvtClass']      = my_evttype
#   meta['MachineParams'] = machineParameters
#   meta['ProdID']        = prodid
    
#DoSplit at stdhep level
activesplitstdhep   = False # True to split stdhep files.

nbevtsperfilestdhep = 1001
nbtasks_split       = -1 # To run ove rall input stdhep
# 
#Do Sim
# ild_sim  = True
ild_sim  = False
#nbtasks = 1 #Take 10 files from input meta data query result
#It's possible to get this number automatically by getting the number of events per file (if known)
#nbtasks = math.ceil(number_of_events_to_process/nb_events_per_signal_file) #needs import math
#can be extended with dirac-ilc-add-tasks-to-prod

#DoSplit
# activesplit   = True  # True to find an existing splitted files.
activesplit   = False  # True to find an existing splitted files.
nbevtsperfile = 1001
number_of_events_per_job = nbevtsperfile

#Do Reco with Overlay
# ild_rec_ov    = False
ild_rec_ov    = True
#Do Reco
ild_rec       = False # please, use WITH OVERLAY

###### Whatever is below is not to be touched... Or at least only when something changes

